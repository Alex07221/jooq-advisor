/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq;


import cn.yxtreme.jooq.jooq.tables.Arrangement;
import cn.yxtreme.jooq.jooq.tables.ChineseMedicine;
import cn.yxtreme.jooq.jooq.tables.ExpressDelivery;
import cn.yxtreme.jooq.jooq.tables.Fence;
import cn.yxtreme.jooq.jooq.tables.InterfaceRecord;
import cn.yxtreme.jooq.jooq.tables.MedicineOrder;
import cn.yxtreme.jooq.jooq.tables.MedicineOrderFlow;
import cn.yxtreme.jooq.jooq.tables.MedicineOrderReceive;
import cn.yxtreme.jooq.jooq.tables.MedicineV2;
import cn.yxtreme.jooq.jooq.tables.NormalMedication;
import cn.yxtreme.jooq.jooq.tables.NormalMedicationPart;
import cn.yxtreme.jooq.jooq.tables.Order;
import cn.yxtreme.jooq.jooq.tables.OrderV2;
import cn.yxtreme.jooq.jooq.tables.RegularUsage;
import cn.yxtreme.jooq.jooq.tables.RegularUsageCount;
import cn.yxtreme.jooq.jooq.tables.UsageDictionary;
import cn.yxtreme.jooq.jooq.tables.records.ArrangementRecord;
import cn.yxtreme.jooq.jooq.tables.records.ChineseMedicineRecord;
import cn.yxtreme.jooq.jooq.tables.records.ExpressDeliveryRecord;
import cn.yxtreme.jooq.jooq.tables.records.FenceRecord;
import cn.yxtreme.jooq.jooq.tables.records.InterfaceRecordRecord;
import cn.yxtreme.jooq.jooq.tables.records.MedicineOrderFlowRecord;
import cn.yxtreme.jooq.jooq.tables.records.MedicineOrderReceiveRecord;
import cn.yxtreme.jooq.jooq.tables.records.MedicineOrderRecord;
import cn.yxtreme.jooq.jooq.tables.records.MedicineV2Record;
import cn.yxtreme.jooq.jooq.tables.records.NormalMedicationPartRecord;
import cn.yxtreme.jooq.jooq.tables.records.NormalMedicationRecord;
import cn.yxtreme.jooq.jooq.tables.records.OrderRecord;
import cn.yxtreme.jooq.jooq.tables.records.OrderV2Record;
import cn.yxtreme.jooq.jooq.tables.records.RegularUsageCountRecord;
import cn.yxtreme.jooq.jooq.tables.records.RegularUsageRecord;
import cn.yxtreme.jooq.jooq.tables.records.UsageDictionaryRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArrangementRecord> ARRANGEMENT_PK = Internal.createUniqueKey(Arrangement.ARRANGEMENT, DSL.name("arrangement_pk"), new TableField[] { Arrangement.ARRANGEMENT.ID }, true);
    public static final UniqueKey<ChineseMedicineRecord> CHINESE_MEDICINE_PK = Internal.createUniqueKey(ChineseMedicine.CHINESE_MEDICINE, DSL.name("chinese_medicine_pk"), new TableField[] { ChineseMedicine.CHINESE_MEDICINE.ID }, true);
    public static final UniqueKey<ExpressDeliveryRecord> EXPRESS_DELIVERY_ORDER_ID_THIRD_BUSINESS_UINDEX = Internal.createUniqueKey(ExpressDelivery.EXPRESS_DELIVERY, DSL.name("express_delivery_order_id_third_business_uindex"), new TableField[] { ExpressDelivery.EXPRESS_DELIVERY.ORDER_ID, ExpressDelivery.EXPRESS_DELIVERY.THIRD_BUSINESS }, true);
    public static final UniqueKey<ExpressDeliveryRecord> EXPRESS_DELIVERY_PKEY = Internal.createUniqueKey(ExpressDelivery.EXPRESS_DELIVERY, DSL.name("express_delivery_pkey"), new TableField[] { ExpressDelivery.EXPRESS_DELIVERY.ID }, true);
    public static final UniqueKey<FenceRecord> FENCE_PK = Internal.createUniqueKey(Fence.FENCE, DSL.name("fence_pk"), new TableField[] { Fence.FENCE.ID }, true);
    public static final UniqueKey<InterfaceRecordRecord> INTERFACE_RECORD_PKEY = Internal.createUniqueKey(InterfaceRecord.INTERFACE_RECORD, DSL.name("interface_record_pkey"), new TableField[] { InterfaceRecord.INTERFACE_RECORD.ID }, true);
    public static final UniqueKey<MedicineOrderRecord> MEDICINE_ORDER_PKEY = Internal.createUniqueKey(MedicineOrder.MEDICINE_ORDER, DSL.name("medicine_order_pkey"), new TableField[] { MedicineOrder.MEDICINE_ORDER.ID }, true);
    public static final UniqueKey<MedicineOrderRecord> ORDER_NO_THIRD_BUSINESS = Internal.createUniqueKey(MedicineOrder.MEDICINE_ORDER, DSL.name("order_no_third_business"), new TableField[] { MedicineOrder.MEDICINE_ORDER.ORDER_NO, MedicineOrder.MEDICINE_ORDER.THIRD_BUSINESS }, true);
    public static final UniqueKey<MedicineOrderFlowRecord> MEDICINE_ORDER_FLOW_PKEY = Internal.createUniqueKey(MedicineOrderFlow.MEDICINE_ORDER_FLOW, DSL.name("medicine_order_flow_pkey"), new TableField[] { MedicineOrderFlow.MEDICINE_ORDER_FLOW.ID }, true);
    public static final UniqueKey<MedicineOrderReceiveRecord> MEDICINE_ORDER_RECEIVE_PKEY = Internal.createUniqueKey(MedicineOrderReceive.MEDICINE_ORDER_RECEIVE, DSL.name("medicine_order_receive_pkey"), new TableField[] { MedicineOrderReceive.MEDICINE_ORDER_RECEIVE.ID }, true);
    public static final UniqueKey<MedicineV2Record> ARRANGEMENT_V2_PK = Internal.createUniqueKey(MedicineV2.MEDICINE_V2, DSL.name("arrangement_v2_pk"), new TableField[] { MedicineV2.MEDICINE_V2.ID }, true);
    public static final UniqueKey<NormalMedicationRecord> NORMAL_MEDICATION_PK = Internal.createUniqueKey(NormalMedication.NORMAL_MEDICATION, DSL.name("normal_medication_pk"), new TableField[] { NormalMedication.NORMAL_MEDICATION.ID }, true);
    public static final UniqueKey<NormalMedicationPartRecord> NORMAL_MEDICATION_PART_PK = Internal.createUniqueKey(NormalMedicationPart.NORMAL_MEDICATION_PART, DSL.name("normal_medication_part_pk"), new TableField[] { NormalMedicationPart.NORMAL_MEDICATION_PART.ID }, true);
    public static final UniqueKey<OrderRecord> ORDER_PK = Internal.createUniqueKey(Order.ORDER, DSL.name("order_pk"), new TableField[] { Order.ORDER.ID }, true);
    public static final UniqueKey<OrderV2Record> ORDER_V2_V2_PK = Internal.createUniqueKey(OrderV2.ORDER_V2, DSL.name("order_v2_v2_pk"), new TableField[] { OrderV2.ORDER_V2.ID }, true);
    public static final UniqueKey<RegularUsageRecord> REGULAR_USAGE_COPY1_PKEY1 = Internal.createUniqueKey(RegularUsage.REGULAR_USAGE, DSL.name("regular_usage_copy1_pkey1"), new TableField[] { RegularUsage.REGULAR_USAGE.ID }, true);
    public static final UniqueKey<RegularUsageCountRecord> REGULAR_USAGE_COUNT_PKEY = Internal.createUniqueKey(RegularUsageCount.REGULAR_USAGE_COUNT, DSL.name("regular_usage_count_pkey"), new TableField[] { RegularUsageCount.REGULAR_USAGE_COUNT.ID }, true);
    public static final UniqueKey<UsageDictionaryRecord> USAGE_DICTIONARY_PKEY = Internal.createUniqueKey(UsageDictionary.USAGE_DICTIONARY, DSL.name("usage_dictionary_pkey"), new TableField[] { UsageDictionary.USAGE_DICTIONARY.ID }, true);
}
