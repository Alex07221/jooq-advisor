/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.ChineseMedicineRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 中药表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChineseMedicine extends TableImpl<ChineseMedicineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chinese_medicine</code>
     */
    public static final ChineseMedicine CHINESE_MEDICINE = new ChineseMedicine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChineseMedicineRecord> getRecordType() {
        return ChineseMedicineRecord.class;
    }

    /**
     * The column <code>public.chinese_medicine.id</code>. 主键id
     */
    public final TableField<ChineseMedicineRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>public.chinese_medicine.herb_name</code>. 药材名
     */
    public final TableField<ChineseMedicineRecord, String> HERB_NAME = createField(DSL.name("herb_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "药材名");

    /**
     * The column <code>public.chinese_medicine.sku_id</code>. 药材 唯一标识 各环境统一
     */
    public final TableField<ChineseMedicineRecord, Long> SKU_ID = createField(DSL.name("sku_id"), SQLDataType.BIGINT.nullable(false), this, "药材 唯一标识 各环境统一");

    /**
     * The column <code>public.chinese_medicine.settlement_price</code>. 保忠堂结算金额
     */
    public final TableField<ChineseMedicineRecord, BigDecimal> SETTLEMENT_PRICE = createField(DSL.name("settlement_price"), SQLDataType.NUMERIC(10, 3).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "保忠堂结算金额");

    /**
     * The column <code>public.chinese_medicine.created_time</code>. 创建时间
     */
    public final TableField<ChineseMedicineRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>public.chinese_medicine.updated_time</code>. 更新时间
     */
    public final TableField<ChineseMedicineRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>public.chinese_medicine.deleted</code>.
     */
    public final TableField<ChineseMedicineRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.chinese_medicine.sell_price</code>. 零售价
     */
    public final TableField<ChineseMedicineRecord, BigDecimal> SELL_PRICE = createField(DSL.name("sell_price"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "零售价");

    /**
     * The column <code>public.chinese_medicine.reference_price</code>. 宝中堂参考价
     */
    public final TableField<ChineseMedicineRecord, BigDecimal> REFERENCE_PRICE = createField(DSL.name("reference_price"), SQLDataType.NUMERIC(10, 3).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "宝中堂参考价");

    private ChineseMedicine(Name alias, Table<ChineseMedicineRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChineseMedicine(Name alias, Table<ChineseMedicineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("中药表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chinese_medicine</code> table reference
     */
    public ChineseMedicine(String alias) {
        this(DSL.name(alias), CHINESE_MEDICINE);
    }

    /**
     * Create an aliased <code>public.chinese_medicine</code> table reference
     */
    public ChineseMedicine(Name alias) {
        this(alias, CHINESE_MEDICINE);
    }

    /**
     * Create a <code>public.chinese_medicine</code> table reference
     */
    public ChineseMedicine() {
        this(DSL.name("chinese_medicine"), null);
    }

    public <O extends Record> ChineseMedicine(Table<O> child, ForeignKey<O, ChineseMedicineRecord> key) {
        super(child, key, CHINESE_MEDICINE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ChineseMedicineRecord, Long> getIdentity() {
        return (Identity<ChineseMedicineRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChineseMedicineRecord> getPrimaryKey() {
        return Keys.CHINESE_MEDICINE_PK;
    }

    @Override
    public ChineseMedicine as(String alias) {
        return new ChineseMedicine(DSL.name(alias), this);
    }

    @Override
    public ChineseMedicine as(Name alias) {
        return new ChineseMedicine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChineseMedicine rename(String name) {
        return new ChineseMedicine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChineseMedicine rename(Name name) {
        return new ChineseMedicine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Long, BigDecimal, LocalDateTime, LocalDateTime, Boolean, BigDecimal, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
