/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Indexes;
import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.ArrangementRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 开药表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Arrangement extends TableImpl<ArrangementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.arrangement</code>
     */
    public static final Arrangement ARRANGEMENT = new Arrangement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArrangementRecord> getRecordType() {
        return ArrangementRecord.class;
    }

    /**
     * The column <code>public.arrangement.id</code>. 主键id
     */
    public final TableField<ArrangementRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>public.arrangement.order_id</code>. 订单id
     */
    public final TableField<ArrangementRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "订单id");

    /**
     * The column <code>public.arrangement.data</code>. 数据json结构体
     */
    public final TableField<ArrangementRecord, String> DATA = createField(DSL.name("data"), SQLDataType.VARCHAR, this, "数据json结构体");

    /**
     * The column <code>public.arrangement.created_user</code>. 创建人
     */
    public final TableField<ArrangementRecord, Long> CREATED_USER = createField(DSL.name("created_user"), SQLDataType.BIGINT, this, "创建人");

    /**
     * The column <code>public.arrangement.updated_user</code>. 更新人
     */
    public final TableField<ArrangementRecord, Long> UPDATED_USER = createField(DSL.name("updated_user"), SQLDataType.BIGINT, this, "更新人");

    /**
     * The column <code>public.arrangement.created_time</code>. 创建时间
     */
    public final TableField<ArrangementRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>public.arrangement.updated_time</code>. 更新时间
     */
    public final TableField<ArrangementRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(6), this, "更新时间");

    /**
     * The column <code>public.arrangement.car_status</code>. 加车状态
     */
    public final TableField<ArrangementRecord, Integer> CAR_STATUS = createField(DSL.name("car_status"), SQLDataType.INTEGER, this, "加车状态");

    /**
     * The column <code>public.arrangement.patient_id</code>. 患者id
     */
    public final TableField<ArrangementRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.BIGINT, this, "患者id");

    /**
     * The column <code>public.arrangement.provider_id</code>. 医生组长id
     */
    public final TableField<ArrangementRecord, Long> PROVIDER_ID = createField(DSL.name("provider_id"), SQLDataType.BIGINT, this, "医生组长id");

    /**
     * The column <code>public.arrangement.user_id</code>. 助手id
     */
    public final TableField<ArrangementRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "助手id");

    /**
     * The column <code>public.arrangement.session_id</code>. 会话id
     */
    public final TableField<ArrangementRecord, Long> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.BIGINT, this, "会话id");

    /**
     * The column <code>public.arrangement.leader_id</code>. 组长id
     */
    public final TableField<ArrangementRecord, Long> LEADER_ID = createField(DSL.name("leader_id"), SQLDataType.BIGINT, this, "组长id");

    /**
     * The column <code>public.arrangement.ca_open_id</code>. 对应ca_openid
     */
    public final TableField<ArrangementRecord, String> CA_OPEN_ID = createField(DSL.name("ca_open_id"), SQLDataType.VARCHAR, this, "对应ca_openid");

    /**
     * The column <code>public.arrangement.pt_no</code>. 就诊人姓名
     */
    public final TableField<ArrangementRecord, String> PT_NO = createField(DSL.name("pt_no"), SQLDataType.VARCHAR, this, "就诊人姓名");

    /**
     * The column <code>public.arrangement.birthday</code>. 生日日期 1983-01-20
     */
    public final TableField<ArrangementRecord, String> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.VARCHAR, this, "生日日期 1983-01-20");

    /**
     * The column <code>public.arrangement.sex</code>. 性别 0:男 1:女
     */
    public final TableField<ArrangementRecord, Integer> SEX = createField(DSL.name("sex"), SQLDataType.INTEGER, this, "性别 0:男 1:女");

    /**
     * The column <code>public.arrangement.department_name</code>. 科室名
     */
    public final TableField<ArrangementRecord, String> DEPARTMENT_NAME = createField(DSL.name("department_name"), SQLDataType.VARCHAR, this, "科室名");

    /**
     * The column <code>public.arrangement.doctor_name</code>. 医生名
     */
    public final TableField<ArrangementRecord, String> DOCTOR_NAME = createField(DSL.name("doctor_name"), SQLDataType.VARCHAR, this, "医生名");

    /**
     * The column <code>public.arrangement.city_name</code>. 患者所在城市
     */
    public final TableField<ArrangementRecord, String> CITY_NAME = createField(DSL.name("city_name"), SQLDataType.VARCHAR, this, "患者所在城市");

    /**
     * The column <code>public.arrangement.id_no</code>. 患者身份证号
     */
    public final TableField<ArrangementRecord, String> ID_NO = createField(DSL.name("id_no"), SQLDataType.VARCHAR, this, "患者身份证号");

    /**
     * The column <code>public.arrangement.complaint_content</code>. 症状描述
     */
    public final TableField<ArrangementRecord, String> COMPLAINT_CONTENT = createField(DSL.name("complaint_content"), SQLDataType.VARCHAR, this, "症状描述");

    /**
     * The column <code>public.arrangement.diseaes_name</code>. 疾病
     */
    public final TableField<ArrangementRecord, String> DISEAES_NAME = createField(DSL.name("diseaes_name"), SQLDataType.VARCHAR, this, "疾病");

    /**
     * The column <code>public.arrangement.shop_id</code>. 对应搜索店铺中的商店id
     */
    public final TableField<ArrangementRecord, Integer> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.INTEGER, this, "对应搜索店铺中的商店id");

    /**
     * The column <code>public.arrangement.pregnant</code>. 是否孕育 传字符串即可
     */
    public final TableField<ArrangementRecord, String> PREGNANT = createField(DSL.name("pregnant"), SQLDataType.VARCHAR, this, "是否孕育 传字符串即可");

    /**
     * The column <code>public.arrangement.allergies</code>. 过敏史
     */
    public final TableField<ArrangementRecord, String> ALLERGIES = createField(DSL.name("allergies"), SQLDataType.VARCHAR, this, "过敏史");

    /**
     * The column <code>public.arrangement.contraindications</code>. 用药禁忌
     */
    public final TableField<ArrangementRecord, String> CONTRAINDICATIONS = createField(DSL.name("contraindications"), SQLDataType.VARCHAR, this, "用药禁忌");

    /**
     * The column <code>public.arrangement.weight</code>. 体重 单位kg
     */
    public final TableField<ArrangementRecord, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC(6, 3), this, "体重 单位kg");

    /**
     * The column <code>public.arrangement.sum_price</code>. 总价 单位分
     */
    public final TableField<ArrangementRecord, Long> SUM_PRICE = createField(DSL.name("sum_price"), SQLDataType.BIGINT, this, "总价 单位分");

    /**
     * The column <code>public.arrangement.pdf_base64</code>. pdf 信息
     */
    public final TableField<ArrangementRecord, String> PDF_BASE64 = createField(DSL.name("pdf_base64"), SQLDataType.CLOB, this, "pdf 信息");

    /**
     * The column <code>public.arrangement.ca_unique_id</code>. ca 唯一键
     */
    public final TableField<ArrangementRecord, String> CA_UNIQUE_ID = createField(DSL.name("ca_unique_id"), SQLDataType.VARCHAR, this, "ca 唯一键");

    /**
     * The column <code>public.arrangement.ca_ur_id</code>. ca流水号
     */
    public final TableField<ArrangementRecord, String> CA_UR_ID = createField(DSL.name("ca_ur_id"), SQLDataType.VARCHAR, this, "ca流水号");

    /**
     * The column <code>public.arrangement.prescription_order_id</code>.
     * 处方的订单表中的id
     */
    public final TableField<ArrangementRecord, Long> PRESCRIPTION_ORDER_ID = createField(DSL.name("prescription_order_id"), SQLDataType.BIGINT, this, "处方的订单表中的id");

    /**
     * The column <code>public.arrangement.mobile</code>. 患者手机号
     */
    public final TableField<ArrangementRecord, Long> MOBILE = createField(DSL.name("mobile"), SQLDataType.BIGINT, this, "患者手机号");

    /**
     * The column <code>public.arrangement.jpg_base64</code>. jpg的base64
     */
    public final TableField<ArrangementRecord, String> JPG_BASE64 = createField(DSL.name("jpg_base64"), SQLDataType.CLOB, this, "jpg的base64");

    /**
     * The column <code>public.arrangement.sign_base64</code>.
     */
    public final TableField<ArrangementRecord, String> SIGN_BASE64 = createField(DSL.name("sign_base64"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.arrangement.is_usable</code>. 是否可用药无忧权益
     */
    public final TableField<ArrangementRecord, Boolean> IS_USABLE = createField(DSL.name("is_usable"), SQLDataType.BOOLEAN, this, "是否可用药无忧权益");

    /**
     * The column <code>public.arrangement.id_card_type</code>. 证件类型
     * 0 身份证 1护照 4出生证明 6港澳台胞证
     */
    public final TableField<ArrangementRecord, Integer> ID_CARD_TYPE = createField(DSL.name("id_card_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "证件类型\n0 身份证 1护照 4出生证明 6港澳台胞证");

    /**
     * The column <code>public.arrangement.comments</code>. 医嘱
     */
    public final TableField<ArrangementRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "医嘱");

    private Arrangement(Name alias, Table<ArrangementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Arrangement(Name alias, Table<ArrangementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("开药表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.arrangement</code> table reference
     */
    public Arrangement(String alias) {
        this(DSL.name(alias), ARRANGEMENT);
    }

    /**
     * Create an aliased <code>public.arrangement</code> table reference
     */
    public Arrangement(Name alias) {
        this(alias, ARRANGEMENT);
    }

    /**
     * Create a <code>public.arrangement</code> table reference
     */
    public Arrangement() {
        this(DSL.name("arrangement"), null);
    }

    public <O extends Record> Arrangement(Table<O> child, ForeignKey<O, ArrangementRecord> key) {
        super(child, key, ARRANGEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ORDER_ID);
    }

    @Override
    public Identity<ArrangementRecord, Long> getIdentity() {
        return (Identity<ArrangementRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArrangementRecord> getPrimaryKey() {
        return Keys.ARRANGEMENT_PK;
    }

    @Override
    public Arrangement as(String alias) {
        return new Arrangement(DSL.name(alias), this);
    }

    @Override
    public Arrangement as(Name alias) {
        return new Arrangement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Arrangement rename(String name) {
        return new Arrangement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Arrangement rename(Name name) {
        return new Arrangement(name, null);
    }
}
