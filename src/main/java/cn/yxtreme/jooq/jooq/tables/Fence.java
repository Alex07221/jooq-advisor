/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Indexes;
import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.FenceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 地理围栏
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fence extends TableImpl<FenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fence</code>
     */
    public static final Fence FENCE = new Fence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FenceRecord> getRecordType() {
        return FenceRecord.class;
    }

    /**
     * The column <code>public.fence.id</code>.
     */
    public final TableField<FenceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.fence.province_code</code>. 省份编码
     */
    public final TableField<FenceRecord, Long> PROVINCE_CODE = createField(DSL.name("province_code"), SQLDataType.BIGINT, this, "省份编码");

    /**
     * The column <code>public.fence.shop_id</code>. 商店id
     */
    public final TableField<FenceRecord, String> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.VARCHAR, this, "商店id");

    /**
     * The column <code>public.fence.shop_name</code>. 商店名称
     */
    public final TableField<FenceRecord, String> SHOP_NAME = createField(DSL.name("shop_name"), SQLDataType.VARCHAR, this, "商店名称");

    private Fence(Name alias, Table<FenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fence(Name alias, Table<FenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("地理围栏"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.fence</code> table reference
     */
    public Fence(String alias) {
        this(DSL.name(alias), FENCE);
    }

    /**
     * Create an aliased <code>public.fence</code> table reference
     */
    public Fence(Name alias) {
        this(alias, FENCE);
    }

    /**
     * Create a <code>public.fence</code> table reference
     */
    public Fence() {
        this(DSL.name("fence"), null);
    }

    public <O extends Record> Fence(Table<O> child, ForeignKey<O, FenceRecord> key) {
        super(child, key, FENCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FENCE_PROVINCE_CODE_UINDEX);
    }

    @Override
    public Identity<FenceRecord, Long> getIdentity() {
        return (Identity<FenceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FenceRecord> getPrimaryKey() {
        return Keys.FENCE_PK;
    }

    @Override
    public Fence as(String alias) {
        return new Fence(DSL.name(alias), this);
    }

    @Override
    public Fence as(Name alias) {
        return new Fence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fence rename(String name) {
        return new Fence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fence rename(Name name) {
        return new Fence(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
