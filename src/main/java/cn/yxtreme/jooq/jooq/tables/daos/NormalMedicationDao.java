/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables.daos;


import cn.yxtreme.jooq.jooq.tables.NormalMedication;
import cn.yxtreme.jooq.jooq.tables.pojos.NormalMedicationPO;
import cn.yxtreme.jooq.jooq.tables.records.NormalMedicationRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 标准方
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormalMedicationDao extends DAOImpl<NormalMedicationRecord, NormalMedicationPO, Long> {

    /**
     * Create a new NormalMedicationDao without any configuration
     */
    public NormalMedicationDao() {
        super(NormalMedication.NORMAL_MEDICATION, NormalMedicationPO.class);
    }

    /**
     * Create a new NormalMedicationDao with an attached configuration
     */
    public NormalMedicationDao(Configuration configuration) {
        super(NormalMedication.NORMAL_MEDICATION, NormalMedicationPO.class, configuration);
    }

    @Override
    public Long getId(NormalMedicationPO object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<NormalMedicationPO> fetchById(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public NormalMedicationPO fetchOneById(Long value) {
        return fetchOne(NormalMedication.NORMAL_MEDICATION.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByName(String... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.NAME, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByVersion(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.VERSION, values);
    }

    /**
     * Fetch records that have <code>dosage BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfDosage(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.DOSAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dosage IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByDosage(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.DOSAGE, values);
    }

    /**
     * Fetch records that have <code>rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfRate(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.RATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rate IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByRate(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.RATE, values);
    }

    /**
     * Fetch records that have <code>processing_methods BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfProcessingMethods(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.PROCESSING_METHODS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>processing_methods IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByProcessingMethods(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.PROCESSING_METHODS, values);
    }

    /**
     * Fetch records that have <code>usage BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfUsage(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.USAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usage IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByUsage(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.USAGE, values);
    }

    /**
     * Fetch records that have <code>usage_unit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfUsageUnit(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.USAGE_UNIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usage_unit IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByUsageUnit(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.USAGE_UNIT, values);
    }

    /**
     * Fetch records that have <code>settlement_price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfSettlementPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.SETTLEMENT_PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>settlement_price IN (values)</code>
     */
    public List<NormalMedicationPO> fetchBySettlementPrice(BigDecimal... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.SETTLEMENT_PRICE, values);
    }

    /**
     * Fetch records that have <code>sell_price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfSellPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.SELL_PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sell_price IN (values)</code>
     */
    public List<NormalMedicationPO> fetchBySellPrice(BigDecimal... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.SELL_PRICE, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfRemark(String lowerInclusive, String upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.REMARK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByRemark(String... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.REMARK, values);
    }

    /**
     * Fetch records that have <code>created_user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfCreatedUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.CREATED_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_user_id IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByCreatedUserId(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.CREATED_USER_ID, values);
    }

    /**
     * Fetch records that have <code>updated_user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfUpdatedUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.UPDATED_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_user_id IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByUpdatedUserId(Long... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.UPDATED_USER_ID, values);
    }

    /**
     * Fetch records that have <code>created_user BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfCreatedUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.CREATED_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_user IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByCreatedUser(String... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.CREATED_USER, values);
    }

    /**
     * Fetch records that have <code>updated_user BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfUpdatedUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.UPDATED_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_user IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByUpdatedUser(String... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.UPDATED_USER, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NormalMedicationPO> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(NormalMedication.NORMAL_MEDICATION.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<NormalMedicationPO> fetchByStatus(Integer... values) {
        return fetch(NormalMedication.NORMAL_MEDICATION.STATUS, values);
    }
        public List<NormalMedicationPO> fetchById(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.ID, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByName(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.NAME, value.toArray(new String[value.size()]));
        }
        public List<NormalMedicationPO> fetchByVersion(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.VERSION, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByDosage(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.DOSAGE, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByRate(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.RATE, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByProcessingMethods(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.PROCESSING_METHODS, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByUsage(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.USAGE, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByUsageUnit(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.USAGE_UNIT, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchBySettlementPrice(Collection<BigDecimal> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.SETTLEMENT_PRICE, value.toArray(new BigDecimal[value.size()]));
        }
        public List<NormalMedicationPO> fetchBySellPrice(Collection<BigDecimal> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.SELL_PRICE, value.toArray(new BigDecimal[value.size()]));
        }
        public List<NormalMedicationPO> fetchByRemark(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.REMARK, value.toArray(new String[value.size()]));
        }
        public List<NormalMedicationPO> fetchByCreatedUserId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.CREATED_USER_ID, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByUpdatedUserId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.UPDATED_USER_ID, value.toArray(new Long[value.size()]));
        }
        public List<NormalMedicationPO> fetchByCreatedUser(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.CREATED_USER, value.toArray(new String[value.size()]));
        }
        public List<NormalMedicationPO> fetchByUpdatedUser(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.UPDATED_USER, value.toArray(new String[value.size()]));
        }
        public List<NormalMedicationPO> fetchByCreatedAt(Collection<LocalDateTime> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.CREATED_AT, value.toArray(new LocalDateTime[value.size()]));
        }
        public List<NormalMedicationPO> fetchByUpdatedAt(Collection<LocalDateTime> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.UPDATED_AT, value.toArray(new LocalDateTime[value.size()]));
        }
        public List<NormalMedicationPO> fetchByStatus(Collection<Integer> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.NormalMedication.NORMAL_MEDICATION.STATUS, value.toArray(new Integer[value.size()]));
        }
}
