/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.OrderRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 订单表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>public.order.id</code>. 主键id
     */
    public final TableField<OrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>public.order.order_no</code>. 处方订单编号
     */
    public final TableField<OrderRecord, String> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.VARCHAR.nullable(false), this, "处方订单编号");

    /**
     * The column <code>public.order.created_user</code>. 创建人
     */
    public final TableField<OrderRecord, Long> CREATED_USER = createField(DSL.name("created_user"), SQLDataType.BIGINT, this, "创建人");

    /**
     * The column <code>public.order.updated_user</code>. 更新人
     */
    public final TableField<OrderRecord, Long> UPDATED_USER = createField(DSL.name("updated_user"), SQLDataType.BIGINT, this, "更新人");

    /**
     * The column <code>public.order.created_time</code>. 创建时间
     */
    public final TableField<OrderRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>public.order.updated_time</code>. 更新时间
     */
    public final TableField<OrderRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(6), this, "更新时间");

    /**
     * The column <code>public.order.order_status</code>. 订单状态(1, "已创建" 2, "已支付"
     * 3, "配送中" 4, "妥投" 6, "取消" 7, "退款" 8, "药店配货中")
     */
    public final TableField<OrderRecord, Integer> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.INTEGER, this, "订单状态(1, \"已创建\" 2, \"已支付\" 3, \"配送中\" 4, \"妥投\" 6, \"取消\" 7, \"退款\" 8, \"药店配货中\")");

    /**
     * The column <code>public.order.dd_order_no</code>. 叮当对应的订单号
     */
    public final TableField<OrderRecord, String> DD_ORDER_NO = createField(DSL.name("dd_order_no"), SQLDataType.VARCHAR, this, "叮当对应的订单号");

    /**
     * The column <code>public.order.total_price</code>. 商品总金额 单位：分

     */
    public final TableField<OrderRecord, Long> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.BIGINT, this, "商品总金额 单位：分\n");

    /**
     * The column <code>public.order.total_pay</code>. 支付金额 单位：分                
     *  = deductionAmount + hadPay = totalPrice + deliverPay 
     */
    public final TableField<OrderRecord, Long> TOTAL_PAY = createField(DSL.name("total_pay"), SQLDataType.BIGINT, this, "支付金额 单位：分                  = deductionAmount + hadPay = totalPrice + deliverPay ");

    /**
     * The column <code>public.order.deduction_ammount</code>. 保险抵扣金额 单位：分
     * 
     * 
     */
    public final TableField<OrderRecord, Long> DEDUCTION_AMMOUNT = createField(DSL.name("deduction_ammount"), SQLDataType.BIGINT, this, "保险抵扣金额 单位：分\n\n");

    /**
     * The column <code>public.order.deliver_pay</code>. 运费单位分
     */
    public final TableField<OrderRecord, Long> DELIVER_PAY = createField(DSL.name("deliver_pay"), SQLDataType.BIGINT, this, "运费单位分");

    /**
     * The column <code>public.order.pay_time</code>. 支付时间
     */
    public final TableField<OrderRecord, LocalDateTime> PAY_TIME = createField(DSL.name("pay_time"), SQLDataType.LOCALDATETIME(6), this, "支付时间");

    /**
     * The column <code>public.order.init_time</code>. 订单生成时间
     */
    public final TableField<OrderRecord, LocalDateTime> INIT_TIME = createField(DSL.name("init_time"), SQLDataType.LOCALDATETIME(6), this, "订单生成时间");

    /**
     * The column <code>public.order.commit_time</code>. 订单提交时间
     */
    public final TableField<OrderRecord, LocalDateTime> COMMIT_TIME = createField(DSL.name("commit_time"), SQLDataType.LOCALDATETIME(6), this, "订单提交时间");

    /**
     * The column <code>public.order.cancel_time</code>. 订单取消时间
     */
    public final TableField<OrderRecord, LocalDateTime> CANCEL_TIME = createField(DSL.name("cancel_time"), SQLDataType.LOCALDATETIME(6), this, "订单取消时间");

    /**
     * The column <code>public.order.refund_time</code>. 退款时间
     */
    public final TableField<OrderRecord, LocalDateTime> REFUND_TIME = createField(DSL.name("refund_time"), SQLDataType.LOCALDATETIME(6), this, "退款时间");

    /**
     * The column <code>public.order.prescription</code>. 是否处方
     */
    public final TableField<OrderRecord, Boolean> PRESCRIPTION = createField(DSL.name("prescription"), SQLDataType.BOOLEAN, this, "是否处方");

    /**
     * The column <code>public.order.had_pay</code>. 现金支付金额 单位：分

     */
    public final TableField<OrderRecord, Long> HAD_PAY = createField(DSL.name("had_pay"), SQLDataType.BIGINT, this, "现金支付金额 单位：分\n");

    /**
     * The column <code>public.order.mobile</code>. 下单人手机号

     */
    public final TableField<OrderRecord, Long> MOBILE = createField(DSL.name("mobile"), SQLDataType.BIGINT, this, "下单人手机号\n");

    /**
     * The column <code>public.order.city</code>. 下单人所在城市

     */
    public final TableField<OrderRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR.defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "下单人所在城市\n");

    /**
     * The column <code>public.order.patient_id</code>. 患者id
     */
    public final TableField<OrderRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.BIGINT, this, "患者id");

    /**
     * The column <code>public.order.leader_id</code>. 组长id
     */
    public final TableField<OrderRecord, Long> LEADER_ID = createField(DSL.name("leader_id"), SQLDataType.BIGINT, this, "组长id");

    /**
     * The column <code>public.order.provider_id</code>. 助手id
     */
    public final TableField<OrderRecord, Long> PROVIDER_ID = createField(DSL.name("provider_id"), SQLDataType.BIGINT, this, "助手id");

    /**
     * The column <code>public.order.latitude</code>. 纬度
     */
    public final TableField<OrderRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.NUMERIC(16, 8), this, "纬度");

    /**
     * The column <code>public.order.longitude</code>. 经度
     */
    public final TableField<OrderRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.NUMERIC(16, 8), this, "经度");

    /**
     * The column <code>public.order.address</code>. 具体发货地址
     */
    public final TableField<OrderRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR, this, "具体发货地址");

    /**
     * The column <code>public.order.right</code>. 是否使用权益
     */
    public final TableField<OrderRecord, Boolean> RIGHT = createField(DSL.name("right"), SQLDataType.BOOLEAN, this, "是否使用权益");

    /**
     * The column <code>public.order.doctor_name</code>. 医生姓名
     */
    public final TableField<OrderRecord, String> DOCTOR_NAME = createField(DSL.name("doctor_name"), SQLDataType.VARCHAR, this, "医生姓名");

    /**
     * The column <code>public.order.right_use_id</code>. 权益锁定使用的id
     */
    public final TableField<OrderRecord, Long> RIGHT_USE_ID = createField(DSL.name("right_use_id"), SQLDataType.BIGINT, this, "权益锁定使用的id");

    /**
     * The column <code>public.order.delivered_time</code>. 妥投时间
     */
    public final TableField<OrderRecord, LocalDateTime> DELIVERED_TIME = createField(DSL.name("delivered_time"), SQLDataType.LOCALDATETIME(6), this, "妥投时间");

    /**
     * The column <code>public.order.right_commit</code>. 权益是否已提交
     */
    public final TableField<OrderRecord, Boolean> RIGHT_COMMIT = createField(DSL.name("right_commit"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "权益是否已提交");

    /**
     * The column <code>public.order.rights_id</code>. 权益id
     */
    public final TableField<OrderRecord, Long> RIGHTS_ID = createField(DSL.name("rights_id"), SQLDataType.BIGINT, this, "权益id");

    /**
     * The column <code>public.order.shop_type</code>. 叮当店铺类型 1为o2o2为b2c
     */
    public final TableField<OrderRecord, Integer> SHOP_TYPE = createField(DSL.name("shop_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "叮当店铺类型 1为o2o2为b2c");

    /**
     * The column <code>public.order.logistic</code>. 物流时间
     */
    public final TableField<OrderRecord, String> LOGISTIC = createField(DSL.name("logistic"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "物流时间");

    /**
     * The column <code>public.order.area</code>.
     */
    public final TableField<OrderRecord, String> AREA = createField(DSL.name("area"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.order.lg_address</code>.
     */
    public final TableField<OrderRecord, String> LG_ADDRESS = createField(DSL.name("lg_address"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.lg_phone</code>.
     */
    public final TableField<OrderRecord, String> LG_PHONE = createField(DSL.name("lg_phone"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.lg_province</code>.
     */
    public final TableField<OrderRecord, String> LG_PROVINCE = createField(DSL.name("lg_province"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.lg_city</code>.
     */
    public final TableField<OrderRecord, String> LG_CITY = createField(DSL.name("lg_city"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.lg_area</code>.
     */
    public final TableField<OrderRecord, String> LG_AREA = createField(DSL.name("lg_area"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.lg_name</code>.
     */
    public final TableField<OrderRecord, String> LG_NAME = createField(DSL.name("lg_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.abandoned_reason</code>. 医生作废原因
     */
    public final TableField<OrderRecord, String> ABANDONED_REASON = createField(DSL.name("abandoned_reason"), SQLDataType.VARCHAR(255), this, "医生作废原因");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("订单表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>public.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrderRecord, Long> getIdentity() {
        return (Identity<OrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.ORDER_PK;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }
}
