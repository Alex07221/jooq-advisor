/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.InterfaceRecordRecord;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 接口调用记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InterfaceRecord extends TableImpl<InterfaceRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.interface_record</code>
     */
    public static final InterfaceRecord INTERFACE_RECORD = new InterfaceRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InterfaceRecordRecord> getRecordType() {
        return InterfaceRecordRecord.class;
    }

    /**
     * The column <code>public.interface_record.id</code>. 主键
     */
    public final TableField<InterfaceRecordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>public.interface_record.interface_name</code>. 接口名
     */
    public final TableField<InterfaceRecordRecord, String> INTERFACE_NAME = createField(DSL.name("interface_name"), SQLDataType.VARCHAR(255).nullable(false), this, "接口名");

    /**
     * The column <code>public.interface_record.request</code>. 请求参数
     */
    public final TableField<InterfaceRecordRecord, String> REQUEST = createField(DSL.name("request"), SQLDataType.CLOB.nullable(false), this, "请求参数");

    /**
     * The column <code>public.interface_record.response</code>. 返回参数
     */
    public final TableField<InterfaceRecordRecord, String> RESPONSE = createField(DSL.name("response"), SQLDataType.CLOB.nullable(false), this, "返回参数");

    /**
     * The column <code>public.interface_record.created_at</code>. 创建时间
     */
    public final TableField<InterfaceRecordRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "创建时间");

    private InterfaceRecord(Name alias, Table<InterfaceRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private InterfaceRecord(Name alias, Table<InterfaceRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("接口调用记录表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.interface_record</code> table reference
     */
    public InterfaceRecord(String alias) {
        this(DSL.name(alias), INTERFACE_RECORD);
    }

    /**
     * Create an aliased <code>public.interface_record</code> table reference
     */
    public InterfaceRecord(Name alias) {
        this(alias, INTERFACE_RECORD);
    }

    /**
     * Create a <code>public.interface_record</code> table reference
     */
    public InterfaceRecord() {
        this(DSL.name("interface_record"), null);
    }

    public <O extends Record> InterfaceRecord(Table<O> child, ForeignKey<O, InterfaceRecordRecord> key) {
        super(child, key, INTERFACE_RECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InterfaceRecordRecord, Long> getIdentity() {
        return (Identity<InterfaceRecordRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InterfaceRecordRecord> getPrimaryKey() {
        return Keys.INTERFACE_RECORD_PKEY;
    }

    @Override
    public InterfaceRecord as(String alias) {
        return new InterfaceRecord(DSL.name(alias), this);
    }

    @Override
    public InterfaceRecord as(Name alias) {
        return new InterfaceRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InterfaceRecord rename(String name) {
        return new InterfaceRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InterfaceRecord rename(Name name) {
        return new InterfaceRecord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
