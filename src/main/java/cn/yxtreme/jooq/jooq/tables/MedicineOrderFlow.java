/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.MedicineOrderFlowRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicineOrderFlow extends TableImpl<MedicineOrderFlowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.medicine_order_flow</code>
     */
    public static final MedicineOrderFlow MEDICINE_ORDER_FLOW = new MedicineOrderFlow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicineOrderFlowRecord> getRecordType() {
        return MedicineOrderFlowRecord.class;
    }

    /**
     * The column <code>public.medicine_order_flow.id</code>.
     */
    public final TableField<MedicineOrderFlowRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.medicine_order_flow.created_time</code>.
     */
    public final TableField<MedicineOrderFlowRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.medicine_order_flow.medicine_order_id</code>.
     */
    public final TableField<MedicineOrderFlowRecord, Long> MEDICINE_ORDER_ID = createField(DSL.name("medicine_order_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.medicine_order_flow.order_status</code>.
     */
    public final TableField<MedicineOrderFlowRecord, Integer> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.INTEGER, this, "");

    private MedicineOrderFlow(Name alias, Table<MedicineOrderFlowRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicineOrderFlow(Name alias, Table<MedicineOrderFlowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.medicine_order_flow</code> table reference
     */
    public MedicineOrderFlow(String alias) {
        this(DSL.name(alias), MEDICINE_ORDER_FLOW);
    }

    /**
     * Create an aliased <code>public.medicine_order_flow</code> table reference
     */
    public MedicineOrderFlow(Name alias) {
        this(alias, MEDICINE_ORDER_FLOW);
    }

    /**
     * Create a <code>public.medicine_order_flow</code> table reference
     */
    public MedicineOrderFlow() {
        this(DSL.name("medicine_order_flow"), null);
    }

    public <O extends Record> MedicineOrderFlow(Table<O> child, ForeignKey<O, MedicineOrderFlowRecord> key) {
        super(child, key, MEDICINE_ORDER_FLOW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MedicineOrderFlowRecord, Long> getIdentity() {
        return (Identity<MedicineOrderFlowRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MedicineOrderFlowRecord> getPrimaryKey() {
        return Keys.MEDICINE_ORDER_FLOW_PKEY;
    }

    @Override
    public MedicineOrderFlow as(String alias) {
        return new MedicineOrderFlow(DSL.name(alias), this);
    }

    @Override
    public MedicineOrderFlow as(Name alias) {
        return new MedicineOrderFlow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicineOrderFlow rename(String name) {
        return new MedicineOrderFlow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicineOrderFlow rename(Name name) {
        return new MedicineOrderFlow(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDateTime, Long, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
