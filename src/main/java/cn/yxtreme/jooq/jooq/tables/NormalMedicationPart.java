/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.NormalMedicationPartRecord;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 标准方组成表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormalMedicationPart extends TableImpl<NormalMedicationPartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.normal_medication_part</code>
     */
    public static final NormalMedicationPart NORMAL_MEDICATION_PART = new NormalMedicationPart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormalMedicationPartRecord> getRecordType() {
        return NormalMedicationPartRecord.class;
    }

    /**
     * The column <code>public.normal_medication_part.id</code>.
     */
    public final TableField<NormalMedicationPartRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.normal_medication_part.weight</code>. 重量
     */
    public final TableField<NormalMedicationPartRecord, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC.nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "重量");

    /**
     * The column <code>public.normal_medication_part.name</code>. 药名
     */
    public final TableField<NormalMedicationPartRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "药名");

    /**
     * The column <code>public.normal_medication_part.sku_id</code>. sku
     * 表中的sku_id
     */
    public final TableField<NormalMedicationPartRecord, Long> SKU_ID = createField(DSL.name("sku_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "sku 表中的sku_id");

    /**
     * The column
     * <code>public.normal_medication_part.chinese_medicine_id</code>. 药材表中的id
     */
    public final TableField<NormalMedicationPartRecord, Long> CHINESE_MEDICINE_ID = createField(DSL.name("chinese_medicine_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "药材表中的id");

    /**
     * The column
     * <code>public.normal_medication_part.normal_medication_id</code>. 标准方表中id
     */
    public final TableField<NormalMedicationPartRecord, Long> NORMAL_MEDICATION_ID = createField(DSL.name("normal_medication_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "标准方表中id");

    private NormalMedicationPart(Name alias, Table<NormalMedicationPartRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormalMedicationPart(Name alias, Table<NormalMedicationPartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("标准方组成表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.normal_medication_part</code> table
     * reference
     */
    public NormalMedicationPart(String alias) {
        this(DSL.name(alias), NORMAL_MEDICATION_PART);
    }

    /**
     * Create an aliased <code>public.normal_medication_part</code> table
     * reference
     */
    public NormalMedicationPart(Name alias) {
        this(alias, NORMAL_MEDICATION_PART);
    }

    /**
     * Create a <code>public.normal_medication_part</code> table reference
     */
    public NormalMedicationPart() {
        this(DSL.name("normal_medication_part"), null);
    }

    public <O extends Record> NormalMedicationPart(Table<O> child, ForeignKey<O, NormalMedicationPartRecord> key) {
        super(child, key, NORMAL_MEDICATION_PART);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NormalMedicationPartRecord, Long> getIdentity() {
        return (Identity<NormalMedicationPartRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NormalMedicationPartRecord> getPrimaryKey() {
        return Keys.NORMAL_MEDICATION_PART_PK;
    }

    @Override
    public NormalMedicationPart as(String alias) {
        return new NormalMedicationPart(DSL.name(alias), this);
    }

    @Override
    public NormalMedicationPart as(Name alias) {
        return new NormalMedicationPart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalMedicationPart rename(String name) {
        return new NormalMedicationPart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalMedicationPart rename(Name name) {
        return new NormalMedicationPart(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, BigDecimal, String, Long, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
