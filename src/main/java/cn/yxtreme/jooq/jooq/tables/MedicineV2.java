/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Indexes;
import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.MedicineV2Record;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 开药表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicineV2 extends TableImpl<MedicineV2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.medicine_v2</code>
     */
    public static final MedicineV2 MEDICINE_V2 = new MedicineV2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicineV2Record> getRecordType() {
        return MedicineV2Record.class;
    }

    /**
     * The column <code>public.medicine_v2.id</code>. 主键id
     */
    public final TableField<MedicineV2Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>public.medicine_v2.consult_order_id</code>. 订单id
     */
    public final TableField<MedicineV2Record, Long> CONSULT_ORDER_ID = createField(DSL.name("consult_order_id"), SQLDataType.BIGINT.nullable(false), this, "订单id");

    /**
     * The column <code>public.medicine_v2.created_time</code>. 创建时间
     */
    public final TableField<MedicineV2Record, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>public.medicine_v2.patient_id</code>. 患者id
     */
    public final TableField<MedicineV2Record, Long> PATIENT_ID = createField(DSL.name("patient_id"), SQLDataType.BIGINT, this, "患者id");

    /**
     * The column <code>public.medicine_v2.provider_id</code>. 医生组长id
     */
    public final TableField<MedicineV2Record, Long> PROVIDER_ID = createField(DSL.name("provider_id"), SQLDataType.BIGINT, this, "医生组长id");

    /**
     * The column <code>public.medicine_v2.assistant_id</code>. 助手id
     */
    public final TableField<MedicineV2Record, Long> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.BIGINT, this, "助手id");

    /**
     * The column <code>public.medicine_v2.im_session_id</code>. 会话id
     */
    public final TableField<MedicineV2Record, Long> IM_SESSION_ID = createField(DSL.name("im_session_id"), SQLDataType.BIGINT, this, "会话id");

    /**
     * The column <code>public.medicine_v2.leader_id</code>. 组长id
     */
    public final TableField<MedicineV2Record, Long> LEADER_ID = createField(DSL.name("leader_id"), SQLDataType.BIGINT, this, "组长id");

    /**
     * The column <code>public.medicine_v2.pt_no</code>. 就诊人姓名
     */
    public final TableField<MedicineV2Record, String> PT_NO = createField(DSL.name("pt_no"), SQLDataType.VARCHAR, this, "就诊人姓名");

    /**
     * The column <code>public.medicine_v2.birthday</code>. 生日日期 1983-01-20
     */
    public final TableField<MedicineV2Record, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "生日日期 1983-01-20");

    /**
     * The column <code>public.medicine_v2.sex</code>. 性别 0:男 1:女
     */
    public final TableField<MedicineV2Record, Integer> SEX = createField(DSL.name("sex"), SQLDataType.INTEGER, this, "性别 0:男 1:女");

    /**
     * The column <code>public.medicine_v2.department_name</code>. 科室名
     */
    public final TableField<MedicineV2Record, String> DEPARTMENT_NAME = createField(DSL.name("department_name"), SQLDataType.VARCHAR, this, "科室名");

    /**
     * The column <code>public.medicine_v2.id_no</code>. 患者身份证号
     */
    public final TableField<MedicineV2Record, String> ID_NO = createField(DSL.name("id_no"), SQLDataType.VARCHAR, this, "患者身份证号");

    /**
     * The column <code>public.medicine_v2.complaint_content</code>. 症状描述
     */
    public final TableField<MedicineV2Record, String> COMPLAINT_CONTENT = createField(DSL.name("complaint_content"), SQLDataType.VARCHAR, this, "症状描述");

    /**
     * The column <code>public.medicine_v2.diseaes_name</code>. 疾病
     */
    public final TableField<MedicineV2Record, String> DISEAES_NAME = createField(DSL.name("diseaes_name"), SQLDataType.VARCHAR, this, "疾病");

    /**
     * The column <code>public.medicine_v2.shop_id</code>. 对应搜索店铺中的商店id
     */
    public final TableField<MedicineV2Record, String> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.VARCHAR, this, "对应搜索店铺中的商店id");

    /**
     * The column <code>public.medicine_v2.pregnant</code>. 是否孕育 传字符串即可
     */
    public final TableField<MedicineV2Record, String> PREGNANT = createField(DSL.name("pregnant"), SQLDataType.VARCHAR, this, "是否孕育 传字符串即可");

    /**
     * The column <code>public.medicine_v2.allergies</code>. 过敏史
     */
    public final TableField<MedicineV2Record, String> ALLERGIES = createField(DSL.name("allergies"), SQLDataType.VARCHAR, this, "过敏史");

    /**
     * The column <code>public.medicine_v2.contraindications</code>. 用药禁忌
     */
    public final TableField<MedicineV2Record, String> CONTRAINDICATIONS = createField(DSL.name("contraindications"), SQLDataType.VARCHAR, this, "用药禁忌");

    /**
     * The column <code>public.medicine_v2.weight</code>. 体重 单位kg
     */
    public final TableField<MedicineV2Record, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC(6, 3), this, "体重 单位kg");

    /**
     * The column <code>public.medicine_v2.medicine_order_id</code>. 处方的订单表中的id
     */
    public final TableField<MedicineV2Record, Long> MEDICINE_ORDER_ID = createField(DSL.name("medicine_order_id"), SQLDataType.BIGINT, this, "处方的订单表中的id");

    /**
     * The column <code>public.medicine_v2.is_usable</code>. 是否可用药无忧权益
     */
    public final TableField<MedicineV2Record, Boolean> IS_USABLE = createField(DSL.name("is_usable"), SQLDataType.BOOLEAN, this, "是否可用药无忧权益");

    /**
     * The column <code>public.medicine_v2.id_card_type</code>. 证件类型 0 身份证 1护照
     * 4出生证明 6港澳台胞证
     */
    public final TableField<MedicineV2Record, Integer> ID_CARD_TYPE = createField(DSL.name("id_card_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "证件类型 0 身份证 1护照 4出生证明 6港澳台胞证");

    /**
     * The column <code>public.medicine_v2.comments</code>. 医嘱
     */
    public final TableField<MedicineV2Record, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "医嘱");

    /**
     * The column <code>public.medicine_v2.prescription</code>. 是否处方
     */
    public final TableField<MedicineV2Record, Boolean> PRESCRIPTION = createField(DSL.name("prescription"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "是否处方");

    /**
     * The column <code>public.medicine_v2.forward</code>. 是否转发
     */
    public final TableField<MedicineV2Record, Boolean> FORWARD = createField(DSL.name("forward"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "是否转发");

    /**
     * The column <code>public.medicine_v2.forward_user_id</code>. 转发用户id
     */
    public final TableField<MedicineV2Record, Long> FORWARD_USER_ID = createField(DSL.name("forward_user_id"), SQLDataType.BIGINT, this, "转发用户id");

    /**
     * The column <code>public.medicine_v2.forward_department</code>. 转发部门
     */
    public final TableField<MedicineV2Record, String> FORWARD_DEPARTMENT = createField(DSL.name("forward_department"), SQLDataType.VARCHAR, this, "转发部门");

    /**
     * The column <code>public.medicine_v2.doctor_name</code>. 就诊医生名
     */
    public final TableField<MedicineV2Record, String> DOCTOR_NAME = createField(DSL.name("doctor_name"), SQLDataType.VARCHAR, this, "就诊医生名");

    /**
     * The column <code>public.medicine_v2.forward_user_name</code>. 转发人用户名
     */
    public final TableField<MedicineV2Record, String> FORWARD_USER_NAME = createField(DSL.name("forward_user_name"), SQLDataType.VARCHAR, this, "转发人用户名");

    /**
     * The column <code>public.medicine_v2.prescription_base64</code>. 处方单base64
     */
    public final TableField<MedicineV2Record, String> PRESCRIPTION_BASE64 = createField(DSL.name("prescription_base64"), SQLDataType.CLOB, this, "处方单base64");

    /**
     * The column <code>public.medicine_v2.shop_type</code>. 1:o2o 2:b2c
     */
    public final TableField<MedicineV2Record, Integer> SHOP_TYPE = createField(DSL.name("shop_type"), SQLDataType.INTEGER.defaultValue(DSL.field("2", SQLDataType.INTEGER)), this, "1:o2o 2:b2c");

    private MedicineV2(Name alias, Table<MedicineV2Record> aliased) {
        this(alias, aliased, null);
    }

    private MedicineV2(Name alias, Table<MedicineV2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("开药表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.medicine_v2</code> table reference
     */
    public MedicineV2(String alias) {
        this(DSL.name(alias), MEDICINE_V2);
    }

    /**
     * Create an aliased <code>public.medicine_v2</code> table reference
     */
    public MedicineV2(Name alias) {
        this(alias, MEDICINE_V2);
    }

    /**
     * Create a <code>public.medicine_v2</code> table reference
     */
    public MedicineV2() {
        this(DSL.name("medicine_v2"), null);
    }

    public <O extends Record> MedicineV2(Table<O> child, ForeignKey<O, MedicineV2Record> key) {
        super(child, key, MEDICINE_V2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ORDER_V2_ID);
    }

    @Override
    public Identity<MedicineV2Record, Long> getIdentity() {
        return (Identity<MedicineV2Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MedicineV2Record> getPrimaryKey() {
        return Keys.ARRANGEMENT_V2_PK;
    }

    @Override
    public MedicineV2 as(String alias) {
        return new MedicineV2(DSL.name(alias), this);
    }

    @Override
    public MedicineV2 as(Name alias) {
        return new MedicineV2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicineV2 rename(String name) {
        return new MedicineV2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicineV2 rename(Name name) {
        return new MedicineV2(name, null);
    }
}
