/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables.daos;


import cn.yxtreme.jooq.jooq.tables.Arrangement;
import cn.yxtreme.jooq.jooq.tables.pojos.ArrangementPO;
import cn.yxtreme.jooq.jooq.tables.records.ArrangementRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 开药表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArrangementDao extends DAOImpl<ArrangementRecord, ArrangementPO, Long> {

    /**
     * Create a new ArrangementDao without any configuration
     */
    public ArrangementDao() {
        super(Arrangement.ARRANGEMENT, ArrangementPO.class);
    }

    /**
     * Create a new ArrangementDao with an attached configuration
     */
    public ArrangementDao(Configuration configuration) {
        super(Arrangement.ARRANGEMENT, ArrangementPO.class, configuration);
    }

    @Override
    public Long getId(ArrangementPO object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ArrangementPO> fetchById(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ArrangementPO fetchOneById(Long value) {
        return fetchOne(Arrangement.ARRANGEMENT.ID, value);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfOrderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByOrderId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>data BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfData(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    public List<ArrangementPO> fetchByData(String... values) {
        return fetch(Arrangement.ARRANGEMENT.DATA, values);
    }

    /**
     * Fetch records that have <code>created_user BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCreatedUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CREATED_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_user IN (values)</code>
     */
    public List<ArrangementPO> fetchByCreatedUser(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.CREATED_USER, values);
    }

    /**
     * Fetch records that have <code>updated_user BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfUpdatedUser(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.UPDATED_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_user IN (values)</code>
     */
    public List<ArrangementPO> fetchByUpdatedUser(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.UPDATED_USER, values);
    }

    /**
     * Fetch records that have <code>created_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCreatedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CREATED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_time IN (values)</code>
     */
    public List<ArrangementPO> fetchByCreatedTime(LocalDateTime... values) {
        return fetch(Arrangement.ARRANGEMENT.CREATED_TIME, values);
    }

    /**
     * Fetch records that have <code>updated_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfUpdatedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.UPDATED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_time IN (values)</code>
     */
    public List<ArrangementPO> fetchByUpdatedTime(LocalDateTime... values) {
        return fetch(Arrangement.ARRANGEMENT.UPDATED_TIME, values);
    }

    /**
     * Fetch records that have <code>car_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCarStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CAR_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>car_status IN (values)</code>
     */
    public List<ArrangementPO> fetchByCarStatus(Integer... values) {
        return fetch(Arrangement.ARRANGEMENT.CAR_STATUS, values);
    }

    /**
     * Fetch records that have <code>patient_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfPatientId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.PATIENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>patient_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByPatientId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.PATIENT_ID, values);
    }

    /**
     * Fetch records that have <code>provider_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfProviderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.PROVIDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>provider_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByProviderId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.PROVIDER_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByUserId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.USER_ID, values);
    }

    /**
     * Fetch records that have <code>session_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfSessionId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.SESSION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>session_id IN (values)</code>
     */
    public List<ArrangementPO> fetchBySessionId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.SESSION_ID, values);
    }

    /**
     * Fetch records that have <code>leader_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfLeaderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.LEADER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>leader_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByLeaderId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.LEADER_ID, values);
    }

    /**
     * Fetch records that have <code>ca_open_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCaOpenId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CA_OPEN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ca_open_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByCaOpenId(String... values) {
        return fetch(Arrangement.ARRANGEMENT.CA_OPEN_ID, values);
    }

    /**
     * Fetch records that have <code>pt_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfPtNo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.PT_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pt_no IN (values)</code>
     */
    public List<ArrangementPO> fetchByPtNo(String... values) {
        return fetch(Arrangement.ARRANGEMENT.PT_NO, values);
    }

    /**
     * Fetch records that have <code>birthday BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfBirthday(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.BIRTHDAY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>birthday IN (values)</code>
     */
    public List<ArrangementPO> fetchByBirthday(String... values) {
        return fetch(Arrangement.ARRANGEMENT.BIRTHDAY, values);
    }

    /**
     * Fetch records that have <code>sex BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfSex(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.SEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sex IN (values)</code>
     */
    public List<ArrangementPO> fetchBySex(Integer... values) {
        return fetch(Arrangement.ARRANGEMENT.SEX, values);
    }

    /**
     * Fetch records that have <code>department_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfDepartmentName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.DEPARTMENT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>department_name IN (values)</code>
     */
    public List<ArrangementPO> fetchByDepartmentName(String... values) {
        return fetch(Arrangement.ARRANGEMENT.DEPARTMENT_NAME, values);
    }

    /**
     * Fetch records that have <code>doctor_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfDoctorName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.DOCTOR_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>doctor_name IN (values)</code>
     */
    public List<ArrangementPO> fetchByDoctorName(String... values) {
        return fetch(Arrangement.ARRANGEMENT.DOCTOR_NAME, values);
    }

    /**
     * Fetch records that have <code>city_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCityName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CITY_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city_name IN (values)</code>
     */
    public List<ArrangementPO> fetchByCityName(String... values) {
        return fetch(Arrangement.ARRANGEMENT.CITY_NAME, values);
    }

    /**
     * Fetch records that have <code>id_no BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfIdNo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.ID_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id_no IN (values)</code>
     */
    public List<ArrangementPO> fetchByIdNo(String... values) {
        return fetch(Arrangement.ARRANGEMENT.ID_NO, values);
    }

    /**
     * Fetch records that have <code>complaint_content BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfComplaintContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.COMPLAINT_CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>complaint_content IN (values)</code>
     */
    public List<ArrangementPO> fetchByComplaintContent(String... values) {
        return fetch(Arrangement.ARRANGEMENT.COMPLAINT_CONTENT, values);
    }

    /**
     * Fetch records that have <code>diseaes_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfDiseaesName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.DISEAES_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>diseaes_name IN (values)</code>
     */
    public List<ArrangementPO> fetchByDiseaesName(String... values) {
        return fetch(Arrangement.ARRANGEMENT.DISEAES_NAME, values);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfShopId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByShopId(Integer... values) {
        return fetch(Arrangement.ARRANGEMENT.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>pregnant BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfPregnant(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.PREGNANT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pregnant IN (values)</code>
     */
    public List<ArrangementPO> fetchByPregnant(String... values) {
        return fetch(Arrangement.ARRANGEMENT.PREGNANT, values);
    }

    /**
     * Fetch records that have <code>allergies BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfAllergies(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.ALLERGIES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>allergies IN (values)</code>
     */
    public List<ArrangementPO> fetchByAllergies(String... values) {
        return fetch(Arrangement.ARRANGEMENT.ALLERGIES, values);
    }

    /**
     * Fetch records that have <code>contraindications BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfContraindications(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CONTRAINDICATIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>contraindications IN (values)</code>
     */
    public List<ArrangementPO> fetchByContraindications(String... values) {
        return fetch(Arrangement.ARRANGEMENT.CONTRAINDICATIONS, values);
    }

    /**
     * Fetch records that have <code>weight BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfWeight(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.WEIGHT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>weight IN (values)</code>
     */
    public List<ArrangementPO> fetchByWeight(BigDecimal... values) {
        return fetch(Arrangement.ARRANGEMENT.WEIGHT, values);
    }

    /**
     * Fetch records that have <code>sum_price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfSumPrice(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.SUM_PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_price IN (values)</code>
     */
    public List<ArrangementPO> fetchBySumPrice(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.SUM_PRICE, values);
    }

    /**
     * Fetch records that have <code>pdf_base64 BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfPdfBase64(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.PDF_BASE64, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pdf_base64 IN (values)</code>
     */
    public List<ArrangementPO> fetchByPdfBase64(String... values) {
        return fetch(Arrangement.ARRANGEMENT.PDF_BASE64, values);
    }

    /**
     * Fetch records that have <code>ca_unique_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCaUniqueId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CA_UNIQUE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ca_unique_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByCaUniqueId(String... values) {
        return fetch(Arrangement.ARRANGEMENT.CA_UNIQUE_ID, values);
    }

    /**
     * Fetch records that have <code>ca_ur_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfCaUrId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.CA_UR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ca_ur_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByCaUrId(String... values) {
        return fetch(Arrangement.ARRANGEMENT.CA_UR_ID, values);
    }

    /**
     * Fetch records that have <code>prescription_order_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfPrescriptionOrderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.PRESCRIPTION_ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>prescription_order_id IN (values)</code>
     */
    public List<ArrangementPO> fetchByPrescriptionOrderId(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.PRESCRIPTION_ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>mobile BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfMobile(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.MOBILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mobile IN (values)</code>
     */
    public List<ArrangementPO> fetchByMobile(Long... values) {
        return fetch(Arrangement.ARRANGEMENT.MOBILE, values);
    }

    /**
     * Fetch records that have <code>jpg_base64 BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfJpgBase64(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.JPG_BASE64, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>jpg_base64 IN (values)</code>
     */
    public List<ArrangementPO> fetchByJpgBase64(String... values) {
        return fetch(Arrangement.ARRANGEMENT.JPG_BASE64, values);
    }

    /**
     * Fetch records that have <code>sign_base64 BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfSignBase64(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.SIGN_BASE64, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sign_base64 IN (values)</code>
     */
    public List<ArrangementPO> fetchBySignBase64(String... values) {
        return fetch(Arrangement.ARRANGEMENT.SIGN_BASE64, values);
    }

    /**
     * Fetch records that have <code>is_usable BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfIsUsable(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.IS_USABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_usable IN (values)</code>
     */
    public List<ArrangementPO> fetchByIsUsable(Boolean... values) {
        return fetch(Arrangement.ARRANGEMENT.IS_USABLE, values);
    }

    /**
     * Fetch records that have <code>id_card_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfIdCardType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.ID_CARD_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id_card_type IN (values)</code>
     */
    public List<ArrangementPO> fetchByIdCardType(Integer... values) {
        return fetch(Arrangement.ARRANGEMENT.ID_CARD_TYPE, values);
    }

    /**
     * Fetch records that have <code>comments BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ArrangementPO> fetchRangeOfComments(String lowerInclusive, String upperInclusive) {
        return fetchRange(Arrangement.ARRANGEMENT.COMMENTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comments IN (values)</code>
     */
    public List<ArrangementPO> fetchByComments(String... values) {
        return fetch(Arrangement.ARRANGEMENT.COMMENTS, values);
    }
        public List<ArrangementPO> fetchById(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByOrderId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.ORDER_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByData(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.DATA, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByCreatedUser(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CREATED_USER, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByUpdatedUser(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.UPDATED_USER, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByCreatedTime(Collection<LocalDateTime> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CREATED_TIME, value.toArray(new LocalDateTime[value.size()]));
        }
        public List<ArrangementPO> fetchByUpdatedTime(Collection<LocalDateTime> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.UPDATED_TIME, value.toArray(new LocalDateTime[value.size()]));
        }
        public List<ArrangementPO> fetchByCarStatus(Collection<Integer> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CAR_STATUS, value.toArray(new Integer[value.size()]));
        }
        public List<ArrangementPO> fetchByPatientId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.PATIENT_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByProviderId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.PROVIDER_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByUserId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.USER_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchBySessionId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.SESSION_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByLeaderId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.LEADER_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByCaOpenId(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CA_OPEN_ID, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByPtNo(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.PT_NO, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByBirthday(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.BIRTHDAY, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchBySex(Collection<Integer> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.SEX, value.toArray(new Integer[value.size()]));
        }
        public List<ArrangementPO> fetchByDepartmentName(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.DEPARTMENT_NAME, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByDoctorName(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.DOCTOR_NAME, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByCityName(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CITY_NAME, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByIdNo(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.ID_NO, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByComplaintContent(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.COMPLAINT_CONTENT, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByDiseaesName(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.DISEAES_NAME, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByShopId(Collection<Integer> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.SHOP_ID, value.toArray(new Integer[value.size()]));
        }
        public List<ArrangementPO> fetchByPregnant(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.PREGNANT, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByAllergies(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.ALLERGIES, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByContraindications(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CONTRAINDICATIONS, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByWeight(Collection<BigDecimal> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.WEIGHT, value.toArray(new BigDecimal[value.size()]));
        }
        public List<ArrangementPO> fetchBySumPrice(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.SUM_PRICE, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByPdfBase64(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.PDF_BASE64, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByCaUniqueId(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CA_UNIQUE_ID, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByCaUrId(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.CA_UR_ID, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByPrescriptionOrderId(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.PRESCRIPTION_ORDER_ID, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByMobile(Collection<Long> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.MOBILE, value.toArray(new Long[value.size()]));
        }
        public List<ArrangementPO> fetchByJpgBase64(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.JPG_BASE64, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchBySignBase64(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.SIGN_BASE64, value.toArray(new String[value.size()]));
        }
        public List<ArrangementPO> fetchByIsUsable(Collection<Boolean> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.IS_USABLE, value.toArray(new Boolean[value.size()]));
        }
        public List<ArrangementPO> fetchByIdCardType(Collection<Integer> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.ID_CARD_TYPE, value.toArray(new Integer[value.size()]));
        }
        public List<ArrangementPO> fetchByComments(Collection<String> value) {
                return fetch(cn.yxtreme.jooq.jooq.tables.Arrangement.ARRANGEMENT.COMMENTS, value.toArray(new String[value.size()]));
        }
}
