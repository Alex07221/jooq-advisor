/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Indexes;
import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.RegularUsageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegularUsage extends TableImpl<RegularUsageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.regular_usage</code>
     */
    public static final RegularUsage REGULAR_USAGE = new RegularUsage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegularUsageRecord> getRecordType() {
        return RegularUsageRecord.class;
    }

    /**
     * The column <code>public.regular_usage.id</code>.
     */
    public final TableField<RegularUsageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.regular_usage.usage</code>. 用法
     */
    public final TableField<RegularUsageRecord, String> USAGE = createField(DSL.name("usage"), SQLDataType.VARCHAR(255), this, "用法");

    /**
     * The column <code>public.regular_usage.dosage</code>. 用量
     */
    public final TableField<RegularUsageRecord, String> DOSAGE = createField(DSL.name("dosage"), SQLDataType.VARCHAR(32), this, "用量");

    /**
     * The column <code>public.regular_usage.sku</code>. sku
     */
    public final TableField<RegularUsageRecord, String> SKU = createField(DSL.name("sku"), SQLDataType.VARCHAR(255), this, "sku");

    /**
     * The column <code>public.regular_usage.usage_unit</code>. 用法单位
     */
    public final TableField<RegularUsageRecord, String> USAGE_UNIT = createField(DSL.name("usage_unit"), SQLDataType.VARCHAR(255), this, "用法单位");

    /**
     * The column <code>public.regular_usage.use_time</code>. 用频
     */
    public final TableField<RegularUsageRecord, String> USE_TIME = createField(DSL.name("use_time"), SQLDataType.VARCHAR, this, "用频");

    /**
     * The column <code>public.regular_usage.use_time_unit</code>. 用频单位
     */
    public final TableField<RegularUsageRecord, String> USE_TIME_UNIT = createField(DSL.name("use_time_unit"), SQLDataType.VARCHAR, this, "用频单位");

    /**
     * The column <code>public.regular_usage.adverse_reactions</code>. 不良反应
     */
    public final TableField<RegularUsageRecord, String> ADVERSE_REACTIONS = createField(DSL.name("adverse_reactions"), SQLDataType.CLOB, this, "不良反应");

    /**
     * The column <code>public.regular_usage.forbiddance</code>. 禁忌
     */
    public final TableField<RegularUsageRecord, String> FORBIDDANCE = createField(DSL.name("forbiddance"), SQLDataType.CLOB, this, "禁忌");

    /**
     * The column <code>public.regular_usage.attention</code>. 注意事项
     */
    public final TableField<RegularUsageRecord, String> ATTENTION = createField(DSL.name("attention"), SQLDataType.CLOB, this, "注意事项");

    /**
     * The column <code>public.regular_usage.interaction</code>. 相互作用
     */
    public final TableField<RegularUsageRecord, String> INTERACTION = createField(DSL.name("interaction"), SQLDataType.CLOB, this, "相互作用");

    /**
     * The column <code>public.regular_usage.deleted</code>.
     */
    public final TableField<RegularUsageRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.regular_usage.created</code>.
     */
    public final TableField<RegularUsageRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.regular_usage.updated</code>.
     */
    public final TableField<RegularUsageRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.regular_usage.version</code>.
     */
    public final TableField<RegularUsageRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    private RegularUsage(Name alias, Table<RegularUsageRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegularUsage(Name alias, Table<RegularUsageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.regular_usage</code> table reference
     */
    public RegularUsage(String alias) {
        this(DSL.name(alias), REGULAR_USAGE);
    }

    /**
     * Create an aliased <code>public.regular_usage</code> table reference
     */
    public RegularUsage(Name alias) {
        this(alias, REGULAR_USAGE);
    }

    /**
     * Create a <code>public.regular_usage</code> table reference
     */
    public RegularUsage() {
        this(DSL.name("regular_usage"), null);
    }

    public <O extends Record> RegularUsage(Table<O> child, ForeignKey<O, RegularUsageRecord> key) {
        super(child, key, REGULAR_USAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REGULAR_USAGE_SKU_IDX_COPY1);
    }

    @Override
    public Identity<RegularUsageRecord, Long> getIdentity() {
        return (Identity<RegularUsageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegularUsageRecord> getPrimaryKey() {
        return Keys.REGULAR_USAGE_COPY1_PKEY1;
    }

    @Override
    public RegularUsage as(String alias) {
        return new RegularUsage(DSL.name(alias), this);
    }

    @Override
    public RegularUsage as(Name alias) {
        return new RegularUsage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularUsage rename(String name) {
        return new RegularUsage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularUsage rename(Name name) {
        return new RegularUsage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, String, String, String, String, String, String, String, String, String, String, Boolean, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
