/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.NormalMedicationRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 标准方
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormalMedication extends TableImpl<NormalMedicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.normal_medication</code>
     */
    public static final NormalMedication NORMAL_MEDICATION = new NormalMedication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormalMedicationRecord> getRecordType() {
        return NormalMedicationRecord.class;
    }

    /**
     * The column <code>public.normal_medication.id</code>. 主键id
     */
    public final TableField<NormalMedicationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>public.normal_medication.name</code>. 标准方名称
     */
    public final TableField<NormalMedicationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "标准方名称");

    /**
     * The column <code>public.normal_medication.version</code>. 版本号
     */
    public final TableField<NormalMedicationRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.BIGINT)), this, "版本号");

    /**
     * The column <code>public.normal_medication.dosage</code>. 用量
     */
    public final TableField<NormalMedicationRecord, Long> DOSAGE = createField(DSL.name("dosage"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "用量");

    /**
     * The column <code>public.normal_medication.rate</code>. 用药频率
     */
    public final TableField<NormalMedicationRecord, Long> RATE = createField(DSL.name("rate"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "用药频率");

    /**
     * The column <code>public.normal_medication.processing_methods</code>. 加工方式
     * 
     * 1 :颗粒剂
     */
    public final TableField<NormalMedicationRecord, Long> PROCESSING_METHODS = createField(DSL.name("processing_methods"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "加工方式\r\n1 :颗粒剂");

    /**
     * The column <code>public.normal_medication.usage</code>. 常规用法1: 水冲
     */
    public final TableField<NormalMedicationRecord, Long> USAGE = createField(DSL.name("usage"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "常规用法1: 水冲");

    /**
     * The column <code>public.normal_medication.usage_unit</code>. 常规用量单位
     * 1：包
     * 2：副
     */
    public final TableField<NormalMedicationRecord, Long> USAGE_UNIT = createField(DSL.name("usage_unit"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "常规用量单位\r\n1：包\r\n2：副");

    /**
     * The column <code>public.normal_medication.settlement_price</code>. 结算价
     */
    public final TableField<NormalMedicationRecord, BigDecimal> SETTLEMENT_PRICE = createField(DSL.name("settlement_price"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "结算价");

    /**
     * The column <code>public.normal_medication.sell_price</code>. 零售价
     */
    public final TableField<NormalMedicationRecord, BigDecimal> SELL_PRICE = createField(DSL.name("sell_price"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "零售价");

    /**
     * The column <code>public.normal_medication.remark</code>. 备注
     */
    public final TableField<NormalMedicationRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "备注");

    /**
     * The column <code>public.normal_medication.created_user_id</code>. 创建人id
     * 同理 如果是更新操作取最初创始人的id
     */
    public final TableField<NormalMedicationRecord, Long> CREATED_USER_ID = createField(DSL.name("created_user_id"), SQLDataType.BIGINT, this, "创建人id\r\n同理 如果是更新操作取最初创始人的id");

    /**
     * The column <code>public.normal_medication.updated_user_id</code>. 更新人id
     */
    public final TableField<NormalMedicationRecord, Long> UPDATED_USER_ID = createField(DSL.name("updated_user_id"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "更新人id");

    /**
     * The column <code>public.normal_medication.created_user</code>. 创建人用户名
     */
    public final TableField<NormalMedicationRecord, String> CREATED_USER = createField(DSL.name("created_user"), SQLDataType.VARCHAR.defaultValue(DSL.field("0", SQLDataType.VARCHAR)), this, "创建人用户名");

    /**
     * The column <code>public.normal_medication.updated_user</code>. 更新人用户名
     */
    public final TableField<NormalMedicationRecord, String> UPDATED_USER = createField(DSL.name("updated_user"), SQLDataType.VARCHAR, this, "更新人用户名");

    /**
     * The column <code>public.normal_medication.created_at</code>. 创建时间
     * 同理 如果是更新操作取最初的创建时间
     */
    public final TableField<NormalMedicationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "创建时间\r\n同理 如果是更新操作取最初的创建时间");

    /**
     * The column <code>public.normal_medication.updated_at</code>. 更新时间
     * 同理 如果是更新操作取最初创建时间
     */
    public final TableField<NormalMedicationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "更新时间\r\n同理 如果是更新操作取最初创建时间");

    /**
     * The column <code>public.normal_medication.status</code>. 1:上架2:下架
     */
    public final TableField<NormalMedicationRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "1:上架2:下架");

    private NormalMedication(Name alias, Table<NormalMedicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormalMedication(Name alias, Table<NormalMedicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("标准方"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.normal_medication</code> table reference
     */
    public NormalMedication(String alias) {
        this(DSL.name(alias), NORMAL_MEDICATION);
    }

    /**
     * Create an aliased <code>public.normal_medication</code> table reference
     */
    public NormalMedication(Name alias) {
        this(alias, NORMAL_MEDICATION);
    }

    /**
     * Create a <code>public.normal_medication</code> table reference
     */
    public NormalMedication() {
        this(DSL.name("normal_medication"), null);
    }

    public <O extends Record> NormalMedication(Table<O> child, ForeignKey<O, NormalMedicationRecord> key) {
        super(child, key, NORMAL_MEDICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NormalMedicationRecord, Long> getIdentity() {
        return (Identity<NormalMedicationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NormalMedicationRecord> getPrimaryKey() {
        return Keys.NORMAL_MEDICATION_PK;
    }

    @Override
    public NormalMedication as(String alias) {
        return new NormalMedication(DSL.name(alias), this);
    }

    @Override
    public NormalMedication as(Name alias) {
        return new NormalMedication(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalMedication rename(String name) {
        return new NormalMedication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalMedication rename(Name name) {
        return new NormalMedication(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, String, Long, Long, Long, Long, Long, Long, BigDecimal, BigDecimal, String, Long, Long, String, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
