/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.MedicineOrderRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 订单表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicineOrder extends TableImpl<MedicineOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.medicine_order</code>
     */
    public static final MedicineOrder MEDICINE_ORDER = new MedicineOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicineOrderRecord> getRecordType() {
        return MedicineOrderRecord.class;
    }

    /**
     * The column <code>public.medicine_order.id</code>. 主键id
     */
    public final TableField<MedicineOrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>public.medicine_order.created_time</code>. 创建时间
     */
    public final TableField<MedicineOrderRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>public.medicine_order.updated_time</code>. 更新时间
     */
    public final TableField<MedicineOrderRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP(0)", SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * The column <code>public.medicine_order.order_status</code>. 订单状态(1, "已创建"
     * 2, "已支付" 3, "配送中" 4, "妥投" 6, "取消" 7, "退款" 8, "药店配货中")
     */
    public final TableField<MedicineOrderRecord, Integer> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.INTEGER, this, "订单状态(1, \"已创建\" 2, \"已支付\" 3, \"配送中\" 4, \"妥投\" 6, \"取消\" 7, \"退款\" 8, \"药店配货中\")");

    /**
     * The column <code>public.medicine_order.third_order_id</code>. 叮当对应的订单号
     */
    public final TableField<MedicineOrderRecord, String> THIRD_ORDER_ID = createField(DSL.name("third_order_id"), SQLDataType.VARCHAR, this, "叮当对应的订单号");

    /**
     * The column <code>public.medicine_order.third_business</code>. 1:叮当 2: 保忠堂
     * 3:小药药
     */
    public final TableField<MedicineOrderRecord, Integer> THIRD_BUSINESS = createField(DSL.name("third_business"), SQLDataType.INTEGER, this, "1:叮当 2: 保忠堂 3:小药药");

    /**
     * The column <code>public.medicine_order.total_price</code>. 商品总金额 单位：分
     */
    public final TableField<MedicineOrderRecord, Long> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.BIGINT, this, "商品总金额 单位：分");

    /**
     * The column <code>public.medicine_order.deduction_ammount</code>. 保险抵扣金额
     * 单位：分
     */
    public final TableField<MedicineOrderRecord, Long> DEDUCTION_AMMOUNT = createField(DSL.name("deduction_ammount"), SQLDataType.BIGINT, this, "保险抵扣金额 单位：分");

    /**
     * The column <code>public.medicine_order.deliver_pay</code>. 运费单位分
     */
    public final TableField<MedicineOrderRecord, Long> DELIVER_PAY = createField(DSL.name("deliver_pay"), SQLDataType.BIGINT, this, "运费单位分");

    /**
     * The column <code>public.medicine_order.had_pay</code>. 实际支付金额
     */
    public final TableField<MedicineOrderRecord, Long> HAD_PAY = createField(DSL.name("had_pay"), SQLDataType.BIGINT, this, "实际支付金额");

    /**
     * The column <code>public.medicine_order.latitude</code>. 纬度
     */
    public final TableField<MedicineOrderRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.NUMERIC(16, 8), this, "纬度");

    /**
     * The column <code>public.medicine_order.longitude</code>. 经度
     */
    public final TableField<MedicineOrderRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.NUMERIC(16, 8), this, "经度");

    /**
     * The column <code>public.medicine_order.rights</code>. 是否使用权益
     */
    public final TableField<MedicineOrderRecord, Boolean> RIGHTS = createField(DSL.name("rights"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "是否使用权益");

    /**
     * The column <code>public.medicine_order.rights_use_id</code>. 权益锁定使用的id
     */
    public final TableField<MedicineOrderRecord, String> RIGHTS_USE_ID = createField(DSL.name("rights_use_id"), SQLDataType.VARCHAR, this, "权益锁定使用的id");

    /**
     * The column <code>public.medicine_order.rights_commit</code>. 权益是否已提交
     */
    public final TableField<MedicineOrderRecord, Boolean> RIGHTS_COMMIT = createField(DSL.name("rights_commit"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "权益是否已提交");

    /**
     * The column <code>public.medicine_order.rights_id</code>. 权益id
     */
    public final TableField<MedicineOrderRecord, Long> RIGHTS_ID = createField(DSL.name("rights_id"), SQLDataType.BIGINT, this, "权益id");

    /**
     * The column <code>public.medicine_order.deliver_discount</code>. 运费优惠金额
     */
    public final TableField<MedicineOrderRecord, Long> DELIVER_DISCOUNT = createField(DSL.name("deliver_discount"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "运费优惠金额");

    /**
     * The column <code>public.medicine_order.abandoned_reason</code>. 医生作废原因
     */
    public final TableField<MedicineOrderRecord, String> ABANDONED_REASON = createField(DSL.name("abandoned_reason"), SQLDataType.VARCHAR(255), this, "医生作废原因");

    /**
     * The column <code>public.medicine_order.total_original_price</code>.
     */
    public final TableField<MedicineOrderRecord, Long> TOTAL_ORIGINAL_PRICE = createField(DSL.name("total_original_price"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.medicine_order.order_no</code>.
     */
    public final TableField<MedicineOrderRecord, String> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private MedicineOrder(Name alias, Table<MedicineOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicineOrder(Name alias, Table<MedicineOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("订单表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.medicine_order</code> table reference
     */
    public MedicineOrder(String alias) {
        this(DSL.name(alias), MEDICINE_ORDER);
    }

    /**
     * Create an aliased <code>public.medicine_order</code> table reference
     */
    public MedicineOrder(Name alias) {
        this(alias, MEDICINE_ORDER);
    }

    /**
     * Create a <code>public.medicine_order</code> table reference
     */
    public MedicineOrder() {
        this(DSL.name("medicine_order"), null);
    }

    public <O extends Record> MedicineOrder(Table<O> child, ForeignKey<O, MedicineOrderRecord> key) {
        super(child, key, MEDICINE_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MedicineOrderRecord, Long> getIdentity() {
        return (Identity<MedicineOrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MedicineOrderRecord> getPrimaryKey() {
        return Keys.MEDICINE_ORDER_PKEY;
    }

    @Override
    public List<UniqueKey<MedicineOrderRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ORDER_NO_THIRD_BUSINESS);
    }

    @Override
    public MedicineOrder as(String alias) {
        return new MedicineOrder(DSL.name(alias), this);
    }

    @Override
    public MedicineOrder as(Name alias) {
        return new MedicineOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicineOrder rename(String name) {
        return new MedicineOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicineOrder rename(Name name) {
        return new MedicineOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, LocalDateTime, LocalDateTime, Integer, String, Integer, Long, Long, Long, Long, BigDecimal, BigDecimal, Boolean, String, Boolean, Long, Long, String, Long, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
