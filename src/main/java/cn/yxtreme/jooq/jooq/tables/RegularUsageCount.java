/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables;


import cn.yxtreme.jooq.jooq.Indexes;
import cn.yxtreme.jooq.jooq.Keys;
import cn.yxtreme.jooq.jooq.Public;
import cn.yxtreme.jooq.jooq.tables.records.RegularUsageCountRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegularUsageCount extends TableImpl<RegularUsageCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.regular_usage_count</code>
     */
    public static final RegularUsageCount REGULAR_USAGE_COUNT = new RegularUsageCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegularUsageCountRecord> getRecordType() {
        return RegularUsageCountRecord.class;
    }

    /**
     * The column <code>public.regular_usage_count.id</code>.
     */
    public final TableField<RegularUsageCountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.regular_usage_count.sku</code>.
     */
    public final TableField<RegularUsageCountRecord, String> SKU = createField(DSL.name("sku"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.regular_usage_count.count</code>.
     */
    public final TableField<RegularUsageCountRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("1", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.regular_usage_count.created</code>.
     */
    public final TableField<RegularUsageCountRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private RegularUsageCount(Name alias, Table<RegularUsageCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegularUsageCount(Name alias, Table<RegularUsageCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.regular_usage_count</code> table reference
     */
    public RegularUsageCount(String alias) {
        this(DSL.name(alias), REGULAR_USAGE_COUNT);
    }

    /**
     * Create an aliased <code>public.regular_usage_count</code> table reference
     */
    public RegularUsageCount(Name alias) {
        this(alias, REGULAR_USAGE_COUNT);
    }

    /**
     * Create a <code>public.regular_usage_count</code> table reference
     */
    public RegularUsageCount() {
        this(DSL.name("regular_usage_count"), null);
    }

    public <O extends Record> RegularUsageCount(Table<O> child, ForeignKey<O, RegularUsageCountRecord> key) {
        super(child, key, REGULAR_USAGE_COUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REGULAR_USAGE_COUNT_SKU_CREATED_IDX);
    }

    @Override
    public Identity<RegularUsageCountRecord, Long> getIdentity() {
        return (Identity<RegularUsageCountRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegularUsageCountRecord> getPrimaryKey() {
        return Keys.REGULAR_USAGE_COUNT_PKEY;
    }

    @Override
    public RegularUsageCount as(String alias) {
        return new RegularUsageCount(DSL.name(alias), this);
    }

    @Override
    public RegularUsageCount as(Name alias) {
        return new RegularUsageCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularUsageCount rename(String name) {
        return new RegularUsageCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularUsageCount rename(Name name) {
        return new RegularUsageCount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
