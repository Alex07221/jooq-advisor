/*
 * This file is generated by jOOQ.
 */
package cn.yxtreme.jooq.jooq.tables.records;


import cn.yxtreme.jooq.jooq.tables.UsageDictionary;
import cn.yxtreme.jooq.jooq.tables.pojos.UsageDictionaryPO;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsageDictionaryRecord extends UpdatableRecordImpl<UsageDictionaryRecord> implements Record8<Long, String, String, String, Boolean, LocalDateTime, LocalDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.usage_dictionary.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.usage_dictionary.concept</code>.
     */
    public void setConcept(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.concept</code>.
     */
    public String getConcept() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.usage_dictionary.key</code>.
     */
    public void setKey(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.key</code>.
     */
    public String getKey() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.usage_dictionary.value</code>.
     */
    public void setValue(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.value</code>.
     */
    public String getValue() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.usage_dictionary.deleted</code>.
     */
    public void setDeleted(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.deleted</code>.
     */
    public Boolean getDeleted() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.usage_dictionary.created</code>.
     */
    public void setCreated(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.created</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.usage_dictionary.updated</code>.
     */
    public void setUpdated(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.updated</code>.
     */
    public LocalDateTime getUpdated() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.usage_dictionary.version</code>.
     */
    public void setVersion(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.usage_dictionary.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, Boolean, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, String, Boolean, LocalDateTime, LocalDateTime, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UsageDictionary.USAGE_DICTIONARY.ID;
    }

    @Override
    public Field<String> field2() {
        return UsageDictionary.USAGE_DICTIONARY.CONCEPT;
    }

    @Override
    public Field<String> field3() {
        return UsageDictionary.USAGE_DICTIONARY.KEY;
    }

    @Override
    public Field<String> field4() {
        return UsageDictionary.USAGE_DICTIONARY.VALUE;
    }

    @Override
    public Field<Boolean> field5() {
        return UsageDictionary.USAGE_DICTIONARY.DELETED;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return UsageDictionary.USAGE_DICTIONARY.CREATED;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return UsageDictionary.USAGE_DICTIONARY.UPDATED;
    }

    @Override
    public Field<Integer> field8() {
        return UsageDictionary.USAGE_DICTIONARY.VERSION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getConcept();
    }

    @Override
    public String component3() {
        return getKey();
    }

    @Override
    public String component4() {
        return getValue();
    }

    @Override
    public Boolean component5() {
        return getDeleted();
    }

    @Override
    public LocalDateTime component6() {
        return getCreated();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdated();
    }

    @Override
    public Integer component8() {
        return getVersion();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getConcept();
    }

    @Override
    public String value3() {
        return getKey();
    }

    @Override
    public String value4() {
        return getValue();
    }

    @Override
    public Boolean value5() {
        return getDeleted();
    }

    @Override
    public LocalDateTime value6() {
        return getCreated();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdated();
    }

    @Override
    public Integer value8() {
        return getVersion();
    }

    @Override
    public UsageDictionaryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value2(String value) {
        setConcept(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value3(String value) {
        setKey(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value4(String value) {
        setValue(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value5(Boolean value) {
        setDeleted(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value6(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value7(LocalDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord value8(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public UsageDictionaryRecord values(Long value1, String value2, String value3, String value4, Boolean value5, LocalDateTime value6, LocalDateTime value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsageDictionaryRecord
     */
    public UsageDictionaryRecord() {
        super(UsageDictionary.USAGE_DICTIONARY);
    }

    /**
     * Create a detached, initialised UsageDictionaryRecord
     */
    public UsageDictionaryRecord(Long id, String concept, String key, String value, Boolean deleted, LocalDateTime created, LocalDateTime updated, Integer version) {
        super(UsageDictionary.USAGE_DICTIONARY);

        setId(id);
        setConcept(concept);
        setKey(key);
        setValue(value);
        setDeleted(deleted);
        setCreated(created);
        setUpdated(updated);
        setVersion(version);
    }

    /**
     * Create a detached, initialised UsageDictionaryRecord
     */
    public UsageDictionaryRecord(UsageDictionaryPO value) {
        super(UsageDictionary.USAGE_DICTIONARY);

        if (value != null) {
            setId(value.getId());
            setConcept(value.getConcept());
            setKey(value.getKey());
            setValue(value.getValue());
            setDeleted(value.getDeleted());
            setCreated(value.getCreated());
            setUpdated(value.getUpdated());
            setVersion(value.getVersion());
        }
    }
}
